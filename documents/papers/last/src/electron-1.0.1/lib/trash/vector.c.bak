#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "field.h"

VectorField *
newVectorField(void)
{
    VectorField  *vectorfield;
    int i, j;

    vectorfield = (VectorField *)malloc(sizeof (VectorField));
    if (!vectorfield)
        perror("newVectorField"), exit(1);

    return vectorfield;
}

VectorField *
makeVectorField(ScaleField  *sfield,
                VectorField *vectorfield)
{
    int     i, j;
    double  up, down, left, right; 

    /* Because 'dx' and 'dy' are arrangement number,          */
    /* didnt divide each 'differentiated' potentials by these.*/
  
    for (i=0; i<FIELD_SIZE; i++) {
        for (j=0; j<FIELD_SIZE; j++) {
    
            if ((i==0) ||
                ((i==0) && ((j==0) || (j==FIELD_SIZE)))) {
                up    = sfield->potential[i+1][j];
                down  = sfield->potential[i+1][j];
            } else if ((i==FIELD_SIZE) ||
                     ((i==FIELD_SIZE) && ((j==0) || (j==FIELD_SIZE)))) {
                up    = sfield->potential[i-1][j];
                down  = sfield->potential[i-1][j];
            } else {
                up    = sfield->potential[i-1][j];
                down  = sfield->potential[i+1][j];
            }  

            if ((j==FIELD_SIZE) || 
                ((j==FIELD_SIZE) && ((i==0) || (i==FIELD_SIZE)))) {
                left  = sfield->potential[i][j-1];
                right = sfield->potential[i][j-1];
            } else if ((j==0) ||
                       ((j==0) && ((i==0) || i==FIELD_SIZE))) {
                left  = sfield->potential[i][j+1];
                right = sfield->potential[i][j+1];
            } else {
                left  = sfield->potential[i][j-1];
                right = sfield->potential[i][j+1];
            }

            /*  diverge point processing */
            if (sfield->potential[i+1][j] == 0.0) 
                down   = sfield->potential[i][j]; 
            else if (sfield->potential[i-1][j] == 0.0) 
                up     = sfield->potential[i][j]; 
            else if (sfield->potential[i][j+1] == 0.0) 
                right  = sfield->potential[i][j]; 
            else if (sfield->potential[i][j-1] == 0.0) 
                left   = sfield->potential[i][j]; 

            if (sfield->potential[i][j] == 0.0) {
                vectorfield->pointOf[i][j].x = 0.0;
                vectorfield->pointOf[i][j].y = 0.0;
            } else {   

                vectorfield->pointOf[i][j].x =
                        ((left - sfield->potential[i][j] )
                         + (sfield->potential[i][j] - right));

                vectorfield->pointOf[i][j].y =
                       ((up - sfield->potential[i][j])
                        + (sfield->potential[i][j] - down));
            }
        } /* for 'j' */
    } /* for 'i' */
    return vectorfield;
}
